name: Docker CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    env:
      DB_IMAGE_NAME: my-todo-db
      APP_IMAGE_NAME: my-todo-app
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push DB image
        uses: docker/build-push-action@v5
        with:
          context: ./
          file: ./Dockerfile-db
          push: true
          tags: ${{ env.DOCKERHUB_USERNAME }}/${{ env.DB_IMAGE_NAME }}:latest

      - name: Build and push App image
        uses: docker/build-push-action@v5
        with:
          context: ./
          file: ./Dockerfile
          push: true
          tags: ${{ env.DOCKERHUB_USERNAME }}/${{ env.APP_IMAGE_NAME }}:latest

      - name: Create Docker network
        run: docker network create todo-network

      - name: Run DB container
        run: |
          docker run -d \
            --name todo-db \
            --network todo-network \
            -e POSTGRES_USER=postgres \
            -e POSTGRES_PASSWORD=postgres \
            -e POSTGRES_DB=todo_db \
            ${{ env.DOCKERHUB_USERNAME }}/${{ env.DB_IMAGE_NAME }}:latest

      - name: Wait for DB to be ready
        run: |
          echo "Waiting for PostgreSQL to be ready..."
          timeout 60s bash -c 'until docker exec todo-db pg_isready -U postgres; do sleep 2; done'

      - name: Run App container
        run: |
          docker run -d \
            --name todo-app \
            --network todo-network \
            -p 8000:8000 \
            -e DATABASE_URL=postgres://postgres:postgres@todo-db:5432/todo_db \
            ${{ env.DOCKERHUB_USERNAME }}/${{ env.APP_IMAGE_NAME }}:latest

      - name: Wait for app to start
        run: |
          echo "Waiting for app to start..."
          sleep 30

      - name: Check application health
        run: |
          curl -f http://localhost:8000/ || (echo "App is not responding" && exit 1)
          curl -f http://localhost:8000/api/tasks/ -H "Accept: application/json" || (echo "API is not responding" && exit 1)
          echo "Application is healthy!"

      - name: Cleanup containers
        if: always()
        run: |
          docker stop todo-app todo-db || true
          docker rm -f todo-app todo-db || true

      - name: Cleanup network
        if: always()
        run: |
          docker network rm todo-network || true